1.
> createdb billing
> psql -d billing

CREATE TABLE customers (
  id serial PRIMARY KEY,
  name text NOT NULL,
  payment_token char(8) NOT NULL UNIQUE
    CHECK (length(payment_token) = 8 AND payment_token = upper(payment_token))
    -- or use
    -- CHECK (payment_token ~ '^[A-Z]{8}$')
);

CREATE TABLE services (
  id serial PRIMARY KEY,
  description text NOT NULL,
  price numeric(10, 2) NOT NULL
    CHECK (price >= 0.00)
);

INSERT INTO customers VALUES
  (1, 'Pat Johnson', 'XHGOAHEQ'),
  (2, 'Nancy Monreal', 'JKWQPJKL'),
  (3, 'Lynn Blake', 'KLZXWEEE'),
  (4, 'Chen Ke-Hua', 'KWETYCVX'),
  (5, 'Scott Lakso', 'UUEAPQPS'),
  (6, 'Jim Pornot', 'XKJEYAZA');
-- this format doesn't advance the serial ndx, so if you try to insert a new record later,
-- it will gen an err:  Key (id)=(1) already exists.

-- instead, use
INSERT INTO customers ("name", payment_token) VALUES
  ('Pat Johnson', 'XHGOAHEQ'),
  ('Nancy Monreal', 'JKWQPJKL'),
  ('Lynn Blake', 'KLZXWEEE'),
  ('Chen Ke-Hua', 'KWETYCVX'),
  ('Scott Lakso', 'UUEAPQPS'),
  ('Jim Pornot', 'XKJEYAZA');

INSERT INTO services (description, price) VALUES
  ('Unix Hosting',         5.95),
  ('DNS',                  4.95),
  ('Whois Registration',   1.95),
  ('High Bandwidth',       15.00),
  ('Business Support',     250.00),
  ('Dedicated Hosting',    50.00),
  ('Bulk Email',           250.00),
  ('One-to-one Training',  999.00);

CREATE TABLE customers_services (
  id serial PRIMARY KEY,
  customer_id int NOT NULL REFERENCES customers (id) ON DELETE CASCADE,
  service_id int NOT NULL REFERENCES services (id),

  -- impose a unique constraint on the combined FKs to prevent duplicate join table records
  UNIQUE (customer_id, service_id)
);

INSERT INTO customers_services (customer_id, service_id) VALUES
  (1, 1),
  (1, 2),
  (1, 3),
  -- debatable as to whether data for Nancy Monreal should be included
  -- ("Nancy Monreal doesn't have any active service");
  -- not including her shows nothing about what services she uses, and the req'ments state
  -- "Enter some data in the join table that shows which services each customer uses"
  -- (2, NULL),
  (3, 1),
  (3, 2),
  (3, 3),
  (3, 4),
  (3, 5),
  (4, 1),
  (4, 4),
  (5, 1),
  (5, 2),
  (5, 6),
  (6, 1),
  (6, 6),
  (6, 7);

ALTER TABLE customers_services ADD UNIQUE(customer_id, service_id);

2.
SELECT DISTINCT c.* FROM customers AS c
  LEFT OUTER JOIN customers_services AS cs ON c.id = cs.customer_id
  WHERE cs.service_id IS NOT NULL
  ORDER BY c.id;

3.
SELECT DISTINCT c.* FROM customers AS c
  LEFT OUTER JOIN customers_services AS cs ON c.id = cs.customer_id
  WHERE cs.service_id IS NULL
  ORDER BY c.id;

SELECT DISTINCT c.*, s.*
  FROM customers AS c
    LEFT OUTER JOIN customers_services AS cs ON c.id = cs.customer_id
    FULL OUTER JOIN services AS s ON s.id = cs.service_id
  WHERE cs.service_id IS NULL OR cs.customer_id IS NULL
  ORDER BY c.id, s.id;

4.
SELECT DISTINCT s.description
  FROM customers_services AS cs
    RIGHT OUTER JOIN services AS s ON s.id = cs.service_id
  WHERE cs.service_id IS NULL;

5.
SELECT c.name, string_agg(s.description, ', ') AS services
  FROM customers AS c
    LEFT OUTER JOIN customers_services AS cs ON c.id = cs.customer_id
    LEFT OUTER JOIN services AS s ON s.id = cs.service_id
  GROUP BY c.id;

6.
SELECT s.description, count(s.description) AS "count"
  FROM customers AS c
    INNER JOIN customers_services AS cs ON c.id = cs.customer_id
    INNER JOIN services AS s ON s.id = cs.service_id
  GROUP BY s.description
  -- HAVING "count" > 2 -- stupidly, this doesn't work ...
  HAVING count(s.description) > 2 -- ... but this does
  ORDER BY "count" DESC -- and so does this (although it's not the req'd ordering)
  ORDER BY s.description;

7.
SELECT sum(s.price) AS gross
  FROM services AS s
    INNER JOIN customers_services AS cs ON s.id = cs.service_id
;

8.
INSERT INTO customers ("name", payment_token) VALUES
  ('John Doe', 'EYODHLCN');

INSERT INTO customers_services (customer_id, service_id) VALUES
  (7, 1),
  (7, 2),
  (7, 3);

9.
SELECT sum(s.price)
  FROM services AS s
    INNER JOIN customers_services AS cs ON s.id = cs.service_id
  WHERE s.price > 100.00
;

SELECT sum(s.price)
  FROM customers
    CROSS JOIN services AS s
  WHERE s.price > 100.00
;

10.
DELETE FROM customers WHERE name = 'Chen Ke-Hua';
DELETE FROM customers_services WHERE service_id =
  (SELECT id FROM services WHERE description = 'Bulk Email');
DELETE FROM services  WHERE description = 'Bulk Email';
