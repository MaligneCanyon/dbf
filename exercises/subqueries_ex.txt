1.
> createdb auction
> psql -d auction

CREATE TABLE bidders (
  id serial PRIMARY KEY,
  name text NOT NULL
);

CREATE TABLE items (
  id serial PRIMARY KEY,
  name text NOT NULL,
  initial_price numeric(6,2) NOT NULL,
  sales_price numeric(6,2)
);

CREATE TABLE bids (
  id serial PRIMARY KEY,
  bidder_id int NOT NULL REFERENCES bidders (id) ON DELETE CASCADE,
  item_id int NOT NULL REFERENCES items (id) ON DELETE CASCADE,
  amount numeric(6,2) NOT NULL
);

CREATE INDEX ON bids (bidder_id, item_id);

-- list the col headers here (and not in the csv files) and use ...
\copy bidders (id, name) FROM 'bidders.csv' WITH DELIMITER ','
\copy items (id, name, initial_price, sales_price) FROM 'items.csv' WITH DELIMITER ','
\copy bids (id, bidder_id, item_id, amount) FROM 'bids.csv' WITH DELIMITER ',', HEADER

or
-- list the col headers in the csv files and use ...
\copy bidders FROM 'bidders.csv' WITH HEADER CSV
\copy items FROM 'items.csv' WITH HEADER CSV
\copy bids FROM 'bids.csv' WITH HEADER CSV

2.
SELECT name AS "Bid On Items" FROM items WHERE id IN
  (SELECT DISTINCT item_id FROM bids);

3.
SELECT name AS "Not Bid On" FROM items WHERE id NOT IN
  (SELECT DISTINCT item_id FROM bids);

4.
SELECT name FROM bidders WHERE EXISTS
  (SELECT 1 FROM bids WHERE bidders.id = bids.bidder_id);
  -- SELECT 1 is arbitrary, used as a trigger to get EXISTS to rtn 't' or 'f';
  -- could use SELECT bids.id (or bidder_id) also, but that clouds the issue

5.
SELECT max(count) FROM
  (SELECT count(bidder_id) FROM bids GROUP BY bidder_id) AS bc;

or
SELECT count(bidder_id) AS max_bid FROM bids
  GROUP BY bidder_id
  ORDER BY max_bid DESC
  LIMIT 1;

6.
SELECT name, (SELECT count(item_id) FROM bids WHERE item_id = items.id) FROM items;

or
SELECT i.name, count(b.item_id) FROM items AS i
  LEFT OUTER JOIN bids AS b ON i.id = b.item_id
  GROUP BY i.name;

7.
SELECT id FROM items WHERE
  (name, initial_price, sales_price) = ('Painting', 100.00, 250.00);

8.
EXPLAIN SELECT name FROM bidders WHERE EXISTS
  (SELECT 1 FROM bids WHERE bidders.id = bids.bidder_id);

                                QUERY PLAN
--------------------------------------------------------------------------
 Hash Join  (cost=33.38..62.84 rows=635 width=32)
   Hash Cond: (bidders.id = bids.bidder_id)
   ->  Seq Scan on bidders  (cost=0.00..22.70 rows=1270 width=36)
   ->  Hash  (cost=30.88..30.88 rows=200 width=4)
         ->  HashAggregate  (cost=28.88..30.88 rows=200 width=4)
               Group Key: bids.bidder_id
               ->  Seq Scan on bids  (cost=0.00..25.10 rows=1510 width=4)

EXPLAIN ANALYZE SELECT name FROM bidders WHERE EXISTS
  (SELECT 1 FROM bids WHERE bidders.id = bids.bidder_id);

9.
EXPLAIN ANALYZE SELECT max(count) FROM
  (SELECT count(bidder_id) FROM bids GROUP BY bidder_id) AS bc;

EXPLAIN ANALYZE SELECT COUNT(bidder_id) AS max_bid FROM bids
  GROUP BY bidder_id
  ORDER BY max_bid DESC
  LIMIT 1;

from the solution,
- using a subq is faster but slightly more costly on system resources
- results may dif signif w/ more data (i.e. larger tbl sizes)
