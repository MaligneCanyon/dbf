see the "Database Diagrams: Cardinality and Modality" video (starting around 3:40) for
the conceptual schema of this db

1.
- save the file locally by right-clicking an selecting "save as"
- load the file using
    psql -d multi_tbl < theater_full.sql

2.
SELECT count(id) as tickets_sold FROM tickets;

or
SELECT count(*) as tickets_sold FROM tickets;

3.
SELECT count(DISTINCT customer_id) AS customers FROM tickets;

4.
SELECT (
  (SELECT count(DISTINCT customer_id) FROM tickets) /
  (SELECT count(DISTINCT id) FROM customers)::float * 100
) AS percent;

or
SELECT count(DISTINCT tickets.customer_id) / count(DISTINCT customers.id)::float * 100 AS percent
  FROM customers LEFT OUTER JOIN tickets ON customers.id = tickets.customer_id;

5.
SELECT events.name AS event, count(tickets.id) AS tickets_sold
  FROM events INNER JOIN tickets ON events.id = tickets.event_id
  GROUP BY events.name ORDER BY tickets_sold DESC;

or
SELECT e.name AS event, count(t.id) AS tickets_sold
  FROM events AS e INNER JOIN tickets AS t ON e.id = t.event_id
  GROUP BY e.name ORDER BY tickets_sold DESC;

6.
SELECT customers.id, customers.email, count(DISTINCT tickets.event_id)
  FROM customers INNER JOIN tickets ON customers.id = tickets.customer_id
  GROUP BY customers.id
  HAVING count(DISTINCT tickets.event_id) = 3;

7.
SELECT events.name AS event, events.starts_at, sections.name AS section,
seats.row, seats.number AS seat
  FROM tickets
    JOIN customers ON tickets.customer_id = customers.id
    JOIN events ON tickets.event_id = events.id
    JOIN seats ON tickets.seat_id = seats.id
    JOIN sections ON seats.section_id = sections.id
  WHERE customers.email = 'gennaro.rath@mcdermott.co';

